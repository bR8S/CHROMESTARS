<div class="padding">
    <h1>CREATE RACE</h1>
    <div class="race-form">
        <div class="race-form-new">
            <div class="form-group">
                <label for="name">Name</label>
                <input type="text" id="name" name="name" required>
            </div>
            <div class="form-group">
                <label for="time">Date and Time</label>
                <input type="datetime-local" id="time" name="time" required>
            </div>
            <div class="track-options form-group">
                <label for="track-options">Track</label>
                <select id="track-options">
                    <% tracks.forEach(track => { %>
                        <option value="<%= track.name %>"><%= track.name %></option>
                    <% }) %>
                </select>
            </div>
            <div class="event-options form-group">
                <label for="event-options">Event</label>
                <select id="event-options">
                    <option value="">N/A</option>
                    <% events.forEach(event => { %>
                        <option value="<%= event.id %>"><%= event.name %></option>
                    <% }) %>
                </select>
            </div>
            <div class="form-group">
                <label for="racer-options">Standings (only include racers that did not DNF)</label>
                <input type="text" placeholder="Search" id="racer-search-filter">

                <div class="racer-options" id="racer-options">
                    <% const sortedRacers = racers.slice().sort((a, b) => a.username.localeCompare(b.username)) %>
                    <% sortedRacers.forEach(racer => { %>
                        <div class="racer" data-alias="<%= racer.username %>">
                            <input type="checkbox" class="racer-checkbox" id="<%= racer.username %>" name="<%= racer.username %>" value="<%= racer._id %>">
                            <div class="racer-select"></div>
                            <span></span>
                            <label for="<%= racer.username %>">
                                <%= racer.username %>
                            </label>
                        </div>
                    <% }) %>
                </div>
            </div>
            <ol class="racer-standings"></ol>

            <div class="form-group">
                <label for="dnf-options">DNF</label>
                <input type="text" placeholder="Search" id="dnf-search-filter">

                <div class="dnf-options" id="dnf-options">
                    <% sortedRacers.forEach(racer => { %>
                        <div class="dnf" data-alias="<%= racer.username %>">
                            <input type="checkbox" class="dnf-checkbox" id="<%= racer.username %>" name="<%= racer.username %>" value="<%= racer._id %>">
                            <div class="dnf-select"></div>
                            <span></span>
                            <label for="<%= racer.username %>">
                                <%= racer.username %>
                            </label>
                        </div>
                    <% }) %>
                </div>
            </div>
            <ol class="dnf-standings"></ol>

            <div class="form-row form-submit-cancel">
                <a class="form__btn" href="/">Cancel</a>
                <button class="form__btn form__submit">Submit Race</button>
            </div>
        </div>
    </div>
</div>

<script>
    const raceCheckboxes = Array.from(document.querySelectorAll('.race-form-new .racer-checkbox'))
    const dnfCheckboxes = Array.from(document.querySelectorAll('.race-form-new .dnf-checkbox'))

    let standingsArr = []
    let standingsIdArr = []

    let dnfArr = []
    let dnfIdArr = []

    raceCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('click', async event => {
            if(!checkbox.checked){
                // standing for current index should be removed, all elements should be moved over
                const index = standingsArr.indexOf(event.target.name)
                if (index > -1) { // only splice array when item is found
                    standingsArr.splice(index, 1) // 2nd parameter means remove one item only
                    standingsIdArr.splice(index, 1)
                }
            }
            else {
                // standing for current index should be added
                standingsArr.push(event.target.name)
                standingsIdArr.push(event.target.value)
            }
            updateStandings(standingsArr)
        })
    })

    dnfCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('click', async event => {
            if(!checkbox.checked){
                // standing for current index should be removed, all elements should be moved over
                const index = dnfArr.indexOf(event.target.name)
                if (index > -1) { // only splice array when item is found
                    dnfArr.splice(index, 1) // 2nd parameter means remove one item only
                    dnfIdArr.splice(index, 1)
                }
            }
            else {
                // standing for current index should be added
                dnfArr.push(event.target.name)
                dnfIdArr.push(event.target.value)
            }
            updateDnf(dnfArr)
        })
    })

    const raceSubmit = document.querySelector('.race-form-new .form__submit')
    submitRaceForm()
    
    function updateStandings(standingsArr){
        const racerStandings = document.querySelector('.racer-standings')
        standingsArr.length > 0 ? racerStandings.classList.add('show') : racerStandings.classList.remove('show')
        racerStandings.innerHTML = ''
        
        standingsArr.forEach(standing => {
            let li = document.createElement('li')
            li.innerText = standing
            racerStandings.append(li)
        })
    }

    function updateDnf(dnfArr){
        const dnfStandings = document.querySelector('.dnf-standings')
        dnfArr.length > 0 ? dnfStandings.classList.add('show') : dnfStandings.classList.remove('show')
        dnfStandings.innerHTML = ''
        
        dnfArr.forEach(standing => {
            let li = document.createElement('li')
            li.innerText = standing
            dnfStandings.append(li)
        })
    }

    async function submitRaceForm(){
        raceSubmit.addEventListener('click', async event => {
            const raceName = document.querySelector('.race-form-new #name').value
            const raceTime = document.querySelector('.race-form-new #time').value
            const raceEvent = document.querySelector('.race-form-new #event-options').value
            const raceTrack = document.querySelector('#track-options').value

            const idString = standingsIdArr.join(',')
            const dnfIdString = dnfIdArr.join(',')
            const allRacers = await getAllRacers(idString)
            const allDnfs = await getAllRacers(dnfIdString)
            const numOfRacers = standingsIdArr.length

            standingsIdArr.forEach((id, index) => {
                index === 0 ? updateRacerWin(id) : updateRacerLoss(id)
                updateRacerCompetitions(id)
                updateRacerAvgPos(id, index)
                updateRacerElo(id, index + 1, allRacers, numOfRacers)
                updateRacerScore(id, index, numOfRacers)
                updateRacerStreak(id)
                updateRacerPodiumCount(id)
                updateRacerRivals(id, index + 1, standingsIdArr)
                updateRacerTracks(id, raceTrack, index)
            })

            dnfIdArr.forEach((id, index) => {
                const dnfPlacement = standingsArr.length
                updateRacerLoss(id)
                updateRacerCompetitions(id)
                updateRacerAvgPos(id, dnfPlacement)
                updateRacerDnfElo(id, allDnfs)
                updateRacerStreak(id)
            })

            const data = JSON.stringify({
                title: raceName,
                time: raceTime,
                track: raceTrack,
                participants: standingsIdArr,
                event: raceEvent
            })

            const newRace = await fetch('/race', {
                method: 'POST',      
                headers: {
                    'Content-Type': 'application/json'
                },
                body: data
            })

            window.location.href = '/race'
        })
    }

    async function updateRacerWin(id) {
        const data = JSON.stringify({
            id: id
        })

        const updateRacer = await fetch(`/account/update-win`, {
            method: 'POST',      
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    async function updateRacerLoss(id) {
        const data = JSON.stringify({
            id: id
        })

        const updateRacer = await fetch(`/account/update-loss`, {
            method: 'POST',      
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    async function updateRacerCompetitions(id) {
        const data = JSON.stringify({
            id: id
        })

        const updateRacer = await fetch(`/account/update-competitions`, {
            method: 'POST',      
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    async function updateRacerAvgPos(id, index){
        const data = JSON.stringify({
            id: id,
            placement: index
        })

        const updateRacer = await fetch('/account/update-avg-pos', {
            method: 'POST',      
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    async function updateRacerScore(id, index, numOfRacers){
        const points = numOfRacers - index
        const data = JSON.stringify({
            id: id,
            points: points
        })
        const updateRacer = await fetch('/account/update-score', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    async function updateRacerDnfElo(id, allDnfs){
        let currRacer = allDnfs.filter(racer => racer._id === id)
        let currElo = currRacer[0].elo 
        let newElo = currElo - 10

        const data = JSON.stringify({
            id: id,
            elo: newElo
        })

        const updateRacer = await fetch('/account/update-elo', {
            method: 'POST',      
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    async function updateRacerElo(id, standing, allRacers, numOfRacers){
        const currRacer = allRacers.filter(racer => racer._id === id)
        const compRacers = allRacers.filter(racer => racer._id !== id)

        /* FETCH RACER CURRENT ELO */
        let currElo = currRacer[0].elo

        /* CALCULATE RACERS NEW ELO */
        const K = 10 // DOwN THE LINE WE CAN HAVE A DYNAMIC ELO RATING BASED ON RACERS ELO
        let actualScore = (numOfRacers - standing) / (numOfRacers - 1)
        let expectedScore = 0
        let currScore = 0

        /* ITERATE OVER ALL RARTICIPATING RACERS BESIDES RACER WE ARE CURR CALC NEW RATING FOR */ 
        compRacers.forEach(racer => {
            currScore += (1 / ( 1 + (10 ** ((racer.elo - currElo) / 400))))
            expectedScore += expectedScore
        })

        expectedScore = expectedScore / (numOfRacers - 1)
        
        const newElo = Math.round(currElo + (K * (actualScore - expectedScore)))

        const data = JSON.stringify({
            id: id,
            elo: newElo
        })

        const updateRacer = await fetch('/account/update-elo', {
            method: 'POST',      
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    async function updateRacerStreak(id){
        const data = JSON.stringify({
            id: id
        })

        const updateRacer = await fetch('/account/update-streak', {
            method: 'POST',      
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    async function getAllRacers(idString){
        // fetch all racers given id string
        const query = `/account/get-racers?ids=${idString}`
        const getRacers = await fetch(query)
        const getRacersJSON = await getRacers.json()
        return getRacersJSON
    }

    async function updateRacerPodiumCount(id){
        const data = JSON.stringify({
            id: id
        })
        
        const updateRacer = await fetch('/account/update-podium-count', {
            method: 'POST',      
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })

    }

    async function updateRacerRivals(id, standing, standingsArr){
        const data = JSON.stringify({
            id: id,
            standing: standing, 
            standings: standingsArr
        })

        const updateRacer = await fetch('/account/update-rivals', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    async function updateRacerTracks(id, track, standing){
        const data = JSON.stringify({
            id: id,
            track: track,
            standing: standing
        })

        const updateRacer = await fetch('/account/update-tracks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
    }

    const racerSearchFilter = document.querySelector('#racer-search-filter')

    let racerInputs = document.querySelectorAll('.racer')
    
    racerSearchFilter.addEventListener("input", event => {
        // Do something when Enter is pressed
        const value = event.target.value
        racerInputs.forEach(racer => {
            const isVisible = racer.dataset.alias.toLowerCase().includes(value)
            racer.classList.toggle("hide-result", !isVisible)
        })
    }) 

    const dnfSearchFilter = document.querySelector('#dnf-search-filter')

    let dnfInputs = document.querySelectorAll('.dnf')
    
    dnfSearchFilter.addEventListener("input", event => {
        // Do something when Enter is pressed
        const value = event.target.value
        dnfInputs.forEach(racer => {
            const isVisible = racer.dataset.alias.toLowerCase().includes(value)
            racer.classList.toggle("hide-result", !isVisible)
        })
    }) 
</script>


<style>
    .race-form form {
        flex-direction: column;
        gap: 40px;
        width: 100%;
    }
    .race-form {
        margin-top: 40px;
        padding: 0;
        align-items: flex-start;
        justify-content: flex-start;
    }
    .form-row { 
        display: flex;
        flex-direction: column;
        gap: 40px;
        margin-top: 48px;
    }
    .form-group {
        width: 100%;
        margin-bottom: 40px;
    }
    .form__submit {
        margin: 0;
    }
    .form__btn {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        background: transparent;
        border: 1px solid #FFFFFF24;
        width: 200px;
        min-height: 42px;
        cursor: pointer;
        transition: all 0.025s ease-in;
    }
    .form__btn:hover {
        border: 1px solid #FFFFFF79;
        border-radius: 0;
        outline: none;
        background: #FFFFFF24;
    }
    .racer-options, .dnf-options {
        display: flex;
        flex-wrap: wrap;
        gap: 24px;
        margin-top: 32px;
    }
    .racer, .dnf {
        display: flex;
        height: 40px;
        width: 120px;
        padding: 0 12px;
        position: relative;
        align-items: center;
        justify-content: center;
    }
    .racer-select, .dnf-select {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        border: 1px solid #FFFFFF24;
        pointer-events: none;
    }
    .racer input, .dnf input {
        width: 100%;
        height: 100%;
        position: absolute;
        opacity: 0;
    }
    .racer input:checked + .racer-select, .dnf input:checked + .dnf-select {
        border: 1px solid #FFFFFF79;
        border-radius: 0;
        outline: none;
        background: #FFFFFF24;
    }
    .racer input:hover, .dnf input:hover {
        cursor: pointer;
    }
    .racer input:hover + .racer-select, .dnf input:hover + .dnf-select {
        border-radius: 0;
        outline: none;
        background: #FFFFFF24;
    }
    .racer label, .dnf label {
        margin: 0 !important;
        pointer-events: none;
    }
    .race-form select option {
        color: black;
    }
    .racer.hide-result, .dnf.hide-result {
        display: none;
    }
    #racer-search-filter::placeholder, #dnf-search-filter::placeholder {
        color: #fff;
    }
    .form-submit-cancel {
        justify-content: center;
        margin-top: 120px;
    }
    .racer-standings, .dnf-standings {
        margin-bottom: 32px;
        display: none;
        flex-direction: column;
        padding: 16px;
        padding-left: 40px;
        background-color: #ffffff0d;
        border-radius: 4px;
        border: 1px solid #ffffff27;
        backdrop-filter: blur(4px);
        gap: 4px;
    }
    .racer-standings.show, .dnf-standings.show {
        display: flex;
    }   
</style>